// Generated by gencpp from file calibration_msgs/CheckerboardExtractionResult.msg
// DO NOT EDIT!


#ifndef CALIBRATION_MSGS_MESSAGE_CHECKERBOARDEXTRACTIONRESULT_H
#define CALIBRATION_MSGS_MESSAGE_CHECKERBOARDEXTRACTIONRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <calibration_msgs/Point2DArray.h>
#include <calibration_msgs/PointArray.h>

namespace calibration_msgs
{
template <class ContainerAllocator>
struct CheckerboardExtractionResult_
{
  typedef CheckerboardExtractionResult_<ContainerAllocator> Type;

  CheckerboardExtractionResult_()
    : image_corners()
    , depth_points()  {
    }
  CheckerboardExtractionResult_(const ContainerAllocator& _alloc)
    : image_corners(_alloc)
    , depth_points(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::calibration_msgs::Point2DArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::calibration_msgs::Point2DArray_<ContainerAllocator> >::other >  _image_corners_type;
  _image_corners_type image_corners;

   typedef std::vector< ::calibration_msgs::PointArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::calibration_msgs::PointArray_<ContainerAllocator> >::other >  _depth_points_type;
  _depth_points_type depth_points;




  typedef boost::shared_ptr< ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator> const> ConstPtr;

}; // struct CheckerboardExtractionResult_

typedef ::calibration_msgs::CheckerboardExtractionResult_<std::allocator<void> > CheckerboardExtractionResult;

typedef boost::shared_ptr< ::calibration_msgs::CheckerboardExtractionResult > CheckerboardExtractionResultPtr;
typedef boost::shared_ptr< ::calibration_msgs::CheckerboardExtractionResult const> CheckerboardExtractionResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace calibration_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'calibration_msgs': ['/home/hri/catkin_ws/src/calibration_toolkit/calibration_msgs/msg', '/home/hri/catkin_ws/devel/.private/calibration_msgs/share/calibration_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b4a5b4669e26c3906fa9dff20cf24410";
  }

  static const char* value(const ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb4a5b4669e26c390ULL;
  static const uint64_t static_value2 = 0x6fa9dff20cf24410ULL;
};

template<class ContainerAllocator>
struct DataType< ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "calibration_msgs/CheckerboardExtractionResult";
  }

  static const char* value(const ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
#result\n\
\n\
calibration_msgs/Point2DArray[] image_corners\n\
calibration_msgs/PointArray[]   depth_points\n\
\n\
# If depth_points[i] size is 2:\n\
#  - depth_points[i][0] = point on the plane\n\
#  - depth_points[i][1] = plane normal\n\
\n\
\n\
================================================================================\n\
MSG: calibration_msgs/Point2DArray\n\
Header header\n\
\n\
uint32 x_size\n\
uint32 y_size\n\
calibration_msgs/Point2D[] points\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: calibration_msgs/Point2D\n\
float64 x\n\
float64 y\n\
\n\
================================================================================\n\
MSG: calibration_msgs/PointArray\n\
Header header\n\
\n\
uint32 x_size\n\
uint32 y_size\n\
geometry_msgs/Point[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.image_corners);
      stream.next(m.depth_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CheckerboardExtractionResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::calibration_msgs::CheckerboardExtractionResult_<ContainerAllocator>& v)
  {
    s << indent << "image_corners[]" << std::endl;
    for (size_t i = 0; i < v.image_corners.size(); ++i)
    {
      s << indent << "  image_corners[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::calibration_msgs::Point2DArray_<ContainerAllocator> >::stream(s, indent + "    ", v.image_corners[i]);
    }
    s << indent << "depth_points[]" << std::endl;
    for (size_t i = 0; i < v.depth_points.size(); ++i)
    {
      s << indent << "  depth_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::calibration_msgs::PointArray_<ContainerAllocator> >::stream(s, indent + "    ", v.depth_points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CALIBRATION_MSGS_MESSAGE_CHECKERBOARDEXTRACTIONRESULT_H
