// Generated by gencpp from file calibration_msgs/GetCalibrationResultsResponse.msg
// DO NOT EDIT!


#ifndef CALIBRATION_MSGS_MESSAGE_GETCALIBRATIONRESULTSRESPONSE_H
#define CALIBRATION_MSGS_MESSAGE_GETCALIBRATIONRESULTSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <calibration_msgs/CalibrationPose.h>

namespace calibration_msgs
{
template <class ContainerAllocator>
struct GetCalibrationResultsResponse_
{
  typedef GetCalibrationResultsResponse_<ContainerAllocator> Type;

  GetCalibrationResultsResponse_()
    : poses()  {
    }
  GetCalibrationResultsResponse_(const ContainerAllocator& _alloc)
    : poses(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::calibration_msgs::CalibrationPose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::calibration_msgs::CalibrationPose_<ContainerAllocator> >::other >  _poses_type;
  _poses_type poses;




  typedef boost::shared_ptr< ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetCalibrationResultsResponse_

typedef ::calibration_msgs::GetCalibrationResultsResponse_<std::allocator<void> > GetCalibrationResultsResponse;

typedef boost::shared_ptr< ::calibration_msgs::GetCalibrationResultsResponse > GetCalibrationResultsResponsePtr;
typedef boost::shared_ptr< ::calibration_msgs::GetCalibrationResultsResponse const> GetCalibrationResultsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace calibration_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'calibration_msgs': ['/home/hri/catkin_ws/src/calibration_toolkit/calibration_msgs/msg', '/home/hri/catkin_ws/devel/.private/calibration_msgs/share/calibration_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0bbbf0e9d4af3cb89da005d0841c9f95";
  }

  static const char* value(const ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0bbbf0e9d4af3cb8ULL;
  static const uint64_t static_value2 = 0x9da005d0841c9f95ULL;
};

template<class ContainerAllocator>
struct DataType< ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "calibration_msgs/GetCalibrationResultsResponse";
  }

  static const char* value(const ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
calibration_msgs/CalibrationPose[] poses\n\
\n\
\n\
\n\
================================================================================\n\
MSG: calibration_msgs/CalibrationPose\n\
string    frame_id\n\
\n\
string    child_frame_id\n\
geometry_msgs/Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetCalibrationResultsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::calibration_msgs::GetCalibrationResultsResponse_<ContainerAllocator>& v)
  {
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::calibration_msgs::CalibrationPose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CALIBRATION_MSGS_MESSAGE_GETCALIBRATIONRESULTSRESPONSE_H
