// Generated by gencpp from file calibration_msgs/GetDeviceInfoRequest.msg
// DO NOT EDIT!


#ifndef CALIBRATION_MSGS_MESSAGE_GETDEVICEINFOREQUEST_H
#define CALIBRATION_MSGS_MESSAGE_GETDEVICEINFOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace calibration_msgs
{
template <class ContainerAllocator>
struct GetDeviceInfoRequest_
{
  typedef GetDeviceInfoRequest_<ContainerAllocator> Type;

  GetDeviceInfoRequest_()
    : requested_types(0)  {
    }
  GetDeviceInfoRequest_(const ContainerAllocator& _alloc)
    : requested_types(0)  {
  (void)_alloc;
    }



   typedef uint8_t _requested_types_type;
  _requested_types_type requested_types;


    enum { INTENSITY = 1u };
     enum { DEPTH = 2u };
     enum { ALL = 3u };
 

  typedef boost::shared_ptr< ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetDeviceInfoRequest_

typedef ::calibration_msgs::GetDeviceInfoRequest_<std::allocator<void> > GetDeviceInfoRequest;

typedef boost::shared_ptr< ::calibration_msgs::GetDeviceInfoRequest > GetDeviceInfoRequestPtr;
typedef boost::shared_ptr< ::calibration_msgs::GetDeviceInfoRequest const> GetDeviceInfoRequestConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace calibration_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'calibration_msgs': ['/home/hri/catkin_ws/src/calibration_toolkit/calibration_msgs/msg', '/home/hri/catkin_ws/devel/.private/calibration_msgs/share/calibration_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f6f60ecc59db1ed6ee1a94d24359b6b4";
  }

  static const char* value(const ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf6f60ecc59db1ed6ULL;
  static const uint64_t static_value2 = 0xee1a94d24359b6b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "calibration_msgs/GetDeviceInfoRequest";
  }

  static const char* value(const ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 INTENSITY=1\n\
uint8 DEPTH=2\n\
uint8 ALL=3\n\
\n\
uint8 requested_types\n\
\n\
";
  }

  static const char* value(const ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.requested_types);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDeviceInfoRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::calibration_msgs::GetDeviceInfoRequest_<ContainerAllocator>& v)
  {
    s << indent << "requested_types: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.requested_types);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CALIBRATION_MSGS_MESSAGE_GETDEVICEINFOREQUEST_H
