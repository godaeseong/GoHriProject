// Auto-generated. Do not edit!

// (in-package calibration_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let Checkerboard = require('./Checkerboard.js');
let std_msgs = _finder('std_msgs');

//-----------------------------------------------------------

class CheckerboardExtractionGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.header = null;
      this.checkerboard = null;
      this.extract_from = null;
      this.max_depth_points = null;
    }
    else {
      if (initObj.hasOwnProperty('header')) {
        this.header = initObj.header
      }
      else {
        this.header = new std_msgs.msg.Header();
      }
      if (initObj.hasOwnProperty('checkerboard')) {
        this.checkerboard = initObj.checkerboard
      }
      else {
        this.checkerboard = new Checkerboard();
      }
      if (initObj.hasOwnProperty('extract_from')) {
        this.extract_from = initObj.extract_from
      }
      else {
        this.extract_from = 0;
      }
      if (initObj.hasOwnProperty('max_depth_points')) {
        this.max_depth_points = initObj.max_depth_points
      }
      else {
        this.max_depth_points = 0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type CheckerboardExtractionGoal
    // Serialize message field [header]
    bufferOffset = std_msgs.msg.Header.serialize(obj.header, buffer, bufferOffset);
    // Serialize message field [checkerboard]
    bufferOffset = Checkerboard.serialize(obj.checkerboard, buffer, bufferOffset);
    // Serialize message field [extract_from]
    bufferOffset = _serializer.uint8(obj.extract_from, buffer, bufferOffset);
    // Serialize message field [max_depth_points]
    bufferOffset = _serializer.int32(obj.max_depth_points, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type CheckerboardExtractionGoal
    let len;
    let data = new CheckerboardExtractionGoal(null);
    // Deserialize message field [header]
    data.header = std_msgs.msg.Header.deserialize(buffer, bufferOffset);
    // Deserialize message field [checkerboard]
    data.checkerboard = Checkerboard.deserialize(buffer, bufferOffset);
    // Deserialize message field [extract_from]
    data.extract_from = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [max_depth_points]
    data.max_depth_points = _deserializer.int32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += std_msgs.msg.Header.getMessageSize(object.header);
    length += Checkerboard.getMessageSize(object.checkerboard);
    return length + 5;
  }

  static datatype() {
    // Returns string type for a message object
    return 'calibration_msgs/CheckerboardExtractionGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '6755a0628825fba080d03429f57f9f9e';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal
    
    uint8 EXTRACT_FROM_NONE=0
    uint8 EXTRACT_FROM_IMAGE=1
    uint8 EXTRACT_FROM_DEPTH=2
    uint8 EXTRACT_FROM_ALL=3
    
    int32 ALL_POINTS=-1
    int32 PLANE_ONLY=0
    
    Header header
    
    Checkerboard checkerboard
    uint8 extract_from
    int32 max_depth_points
    
    # max_depth_points must be in the interval [3, +inf[
    # or be one of the special values ALL_POINTS, PLANE_ONLY
    
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    # 0: no frame
    # 1: global frame
    string frame_id
    
    ================================================================================
    MSG: calibration_msgs/Checkerboard
    Header header
    
    string parent_frame_id
    geometry_msgs/Pose pose
    
    uint32 rows
    uint32 cols
    float32 cell_width
    float32 cell_height
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new CheckerboardExtractionGoal(null);
    if (msg.header !== undefined) {
      resolved.header = std_msgs.msg.Header.Resolve(msg.header)
    }
    else {
      resolved.header = new std_msgs.msg.Header()
    }

    if (msg.checkerboard !== undefined) {
      resolved.checkerboard = Checkerboard.Resolve(msg.checkerboard)
    }
    else {
      resolved.checkerboard = new Checkerboard()
    }

    if (msg.extract_from !== undefined) {
      resolved.extract_from = msg.extract_from;
    }
    else {
      resolved.extract_from = 0
    }

    if (msg.max_depth_points !== undefined) {
      resolved.max_depth_points = msg.max_depth_points;
    }
    else {
      resolved.max_depth_points = 0
    }

    return resolved;
    }
};

// Constants for message
CheckerboardExtractionGoal.Constants = {
  EXTRACT_FROM_NONE: 0,
  EXTRACT_FROM_IMAGE: 1,
  EXTRACT_FROM_DEPTH: 2,
  EXTRACT_FROM_ALL: 3,
  ALL_POINTS: -1,
  PLANE_ONLY: 0,
}

module.exports = CheckerboardExtractionGoal;
