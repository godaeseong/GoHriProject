;; Auto-generated. Do not edit!


(when (boundp 'calibration_msgs::CheckerboardExtractionResult)
  (if (not (find-package "CALIBRATION_MSGS"))
    (make-package "CALIBRATION_MSGS"))
  (shadow 'CheckerboardExtractionResult (find-package "CALIBRATION_MSGS")))
(unless (find-package "CALIBRATION_MSGS::CHECKERBOARDEXTRACTIONRESULT")
  (make-package "CALIBRATION_MSGS::CHECKERBOARDEXTRACTIONRESULT"))

(in-package "ROS")
;;//! \htmlinclude CheckerboardExtractionResult.msg.html


(defclass calibration_msgs::CheckerboardExtractionResult
  :super ros::object
  :slots (_image_corners _depth_points ))

(defmethod calibration_msgs::CheckerboardExtractionResult
  (:init
   (&key
    ((:image_corners __image_corners) (let (r) (dotimes (i 0) (push (instance calibration_msgs::Point2DArray :init) r)) r))
    ((:depth_points __depth_points) (let (r) (dotimes (i 0) (push (instance calibration_msgs::PointArray :init) r)) r))
    )
   (send-super :init)
   (setq _image_corners __image_corners)
   (setq _depth_points __depth_points)
   self)
  (:image_corners
   (&rest __image_corners)
   (if (keywordp (car __image_corners))
       (send* _image_corners __image_corners)
     (progn
       (if __image_corners (setq _image_corners (car __image_corners)))
       _image_corners)))
  (:depth_points
   (&rest __depth_points)
   (if (keywordp (car __depth_points))
       (send* _depth_points __depth_points)
     (progn
       (if __depth_points (setq _depth_points (car __depth_points)))
       _depth_points)))
  (:serialization-length
   ()
   (+
    ;; calibration_msgs/Point2DArray[] _image_corners
    (apply #'+ (send-all _image_corners :serialization-length)) 4
    ;; calibration_msgs/PointArray[] _depth_points
    (apply #'+ (send-all _depth_points :serialization-length)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; calibration_msgs/Point2DArray[] _image_corners
     (write-long (length _image_corners) s)
     (dolist (elem _image_corners)
       (send elem :serialize s)
       )
     ;; calibration_msgs/PointArray[] _depth_points
     (write-long (length _depth_points) s)
     (dolist (elem _depth_points)
       (send elem :serialize s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; calibration_msgs/Point2DArray[] _image_corners
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _image_corners (let (r) (dotimes (i n) (push (instance calibration_msgs::Point2DArray :init) r)) r))
     (dolist (elem- _image_corners)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;; calibration_msgs/PointArray[] _depth_points
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _depth_points (let (r) (dotimes (i n) (push (instance calibration_msgs::PointArray :init) r)) r))
     (dolist (elem- _depth_points)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;;
   self)
  )

(setf (get calibration_msgs::CheckerboardExtractionResult :md5sum-) "b4a5b4669e26c3906fa9dff20cf24410")
(setf (get calibration_msgs::CheckerboardExtractionResult :datatype-) "calibration_msgs/CheckerboardExtractionResult")
(setf (get calibration_msgs::CheckerboardExtractionResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

#result

calibration_msgs/Point2DArray[] image_corners
calibration_msgs/PointArray[]   depth_points

# If depth_points[i] size is 2:
#  - depth_points[i][0] = point on the plane
#  - depth_points[i][1] = plane normal


================================================================================
MSG: calibration_msgs/Point2DArray
Header header

uint32 x_size
uint32 y_size
calibration_msgs/Point2D[] points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: calibration_msgs/Point2D
float64 x
float64 y

================================================================================
MSG: calibration_msgs/PointArray
Header header

uint32 x_size
uint32 y_size
geometry_msgs/Point[] points

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

")



(provide :calibration_msgs/CheckerboardExtractionResult "b4a5b4669e26c3906fa9dff20cf24410")


