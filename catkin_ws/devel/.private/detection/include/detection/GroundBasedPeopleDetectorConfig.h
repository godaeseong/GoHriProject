//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the detection package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __detection__GROUNDBASEDPEOPLEDETECTORCONFIG_H__
#define __detection__GROUNDBASEDPEOPLEDETECTORCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace detection
{
  class GroundBasedPeopleDetectorConfigStatics;
  
  class GroundBasedPeopleDetectorConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(GroundBasedPeopleDetectorConfig &config, const GroundBasedPeopleDetectorConfig &max, const GroundBasedPeopleDetectorConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const GroundBasedPeopleDetectorConfig &config1, const GroundBasedPeopleDetectorConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, GroundBasedPeopleDetectorConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const GroundBasedPeopleDetectorConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, GroundBasedPeopleDetectorConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const GroundBasedPeopleDetectorConfig &config) const = 0;
      virtual void getValue(const GroundBasedPeopleDetectorConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, 
          std::string a_description, std::string a_edit_method, T GroundBasedPeopleDetectorConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (GroundBasedPeopleDetectorConfig::* field);

      virtual void clamp(GroundBasedPeopleDetectorConfig &config, const GroundBasedPeopleDetectorConfig &max, const GroundBasedPeopleDetectorConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const GroundBasedPeopleDetectorConfig &config1, const GroundBasedPeopleDetectorConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, GroundBasedPeopleDetectorConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const GroundBasedPeopleDetectorConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, GroundBasedPeopleDetectorConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const GroundBasedPeopleDetectorConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const GroundBasedPeopleDetectorConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, GroundBasedPeopleDetectorConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, GroundBasedPeopleDetectorConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<GroundBasedPeopleDetectorConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(GroundBasedPeopleDetectorConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("valid_points_threshold"==(*_i)->name){valid_points_threshold = boost::any_cast<double>(val);}
        if("ground_based_people_detection_min_confidence"==(*_i)->name){ground_based_people_detection_min_confidence = boost::any_cast<double>(val);}
        if("minimum_person_height"==(*_i)->name){minimum_person_height = boost::any_cast<double>(val);}
        if("maximum_person_height"==(*_i)->name){maximum_person_height = boost::any_cast<double>(val);}
        if("max_distance"==(*_i)->name){max_distance = boost::any_cast<double>(val);}
        if("sampling_factor"==(*_i)->name){sampling_factor = boost::any_cast<int>(val);}
        if("use_rgb"==(*_i)->name){use_rgb = boost::any_cast<bool>(val);}
        if("minimum_luminance"==(*_i)->name){minimum_luminance = boost::any_cast<int>(val);}
        if("sensor_tilt_compensation"==(*_i)->name){sensor_tilt_compensation = boost::any_cast<bool>(val);}
        if("heads_minimum_distance"==(*_i)->name){heads_minimum_distance = boost::any_cast<double>(val);}
        if("voxel_size"==(*_i)->name){voxel_size = boost::any_cast<double>(val);}
        if("apply_denoising"==(*_i)->name){apply_denoising = boost::any_cast<bool>(val);}
        if("mean_k_denoising"==(*_i)->name){mean_k_denoising = boost::any_cast<double>(val);}
        if("std_dev_denoising"==(*_i)->name){std_dev_denoising = boost::any_cast<double>(val);}
        if("background_subtraction"==(*_i)->name){background_subtraction = boost::any_cast<bool>(val);}
        if("background_resolution"==(*_i)->name){background_resolution = boost::any_cast<double>(val);}
        if("background_seconds"==(*_i)->name){background_seconds = boost::any_cast<double>(val);}
        if("lock_ground"==(*_i)->name){lock_ground = boost::any_cast<bool>(val);}
        if("sr_conf_threshold"==(*_i)->name){sr_conf_threshold = boost::any_cast<int>(val);}
      }
    }

    double valid_points_threshold;
double ground_based_people_detection_min_confidence;
double minimum_person_height;
double maximum_person_height;
double max_distance;
int sampling_factor;
bool use_rgb;
int minimum_luminance;
bool sensor_tilt_compensation;
double heads_minimum_distance;
double voxel_size;
bool apply_denoising;
double mean_k_denoising;
double std_dev_denoising;
bool background_subtraction;
double background_resolution;
double background_seconds;
bool lock_ground;
int sr_conf_threshold;

    bool state;
    std::string name;

    
}groups;



//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double valid_points_threshold;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ground_based_people_detection_min_confidence;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double minimum_person_height;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double maximum_person_height;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_distance;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int sampling_factor;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool use_rgb;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int minimum_luminance;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool sensor_tilt_compensation;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double heads_minimum_distance;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double voxel_size;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool apply_denoising;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double mean_k_denoising;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double std_dev_denoising;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool background_subtraction;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double background_resolution;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double background_seconds;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool lock_ground;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int sr_conf_threshold;
//#line 218 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("GroundBasedPeopleDetectorConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const GroundBasedPeopleDetectorConfig &__max__ = __getMax__();
      const GroundBasedPeopleDetectorConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const GroundBasedPeopleDetectorConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const GroundBasedPeopleDetectorConfig &__getDefault__();
    static const GroundBasedPeopleDetectorConfig &__getMax__();
    static const GroundBasedPeopleDetectorConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const GroundBasedPeopleDetectorConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void GroundBasedPeopleDetectorConfig::ParamDescription<std::string>::clamp(GroundBasedPeopleDetectorConfig &config, const GroundBasedPeopleDetectorConfig &max, const GroundBasedPeopleDetectorConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class GroundBasedPeopleDetectorConfigStatics
  {
    friend class GroundBasedPeopleDetectorConfig;
    
    GroundBasedPeopleDetectorConfigStatics()
    {
GroundBasedPeopleDetectorConfig::GroupDescription<GroundBasedPeopleDetectorConfig::DEFAULT, GroundBasedPeopleDetectorConfig> Default("Default", "", 0, 0, true, &GroundBasedPeopleDetectorConfig::groups);
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.valid_points_threshold = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.valid_points_threshold = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.valid_points_threshold = 0.3;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("valid_points_threshold", "double", 0, "Minimum ratio of valid point cloud points", "", &GroundBasedPeopleDetectorConfig::valid_points_threshold)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("valid_points_threshold", "double", 0, "Minimum ratio of valid point cloud points", "", &GroundBasedPeopleDetectorConfig::valid_points_threshold)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ground_based_people_detection_min_confidence = -10.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ground_based_people_detection_min_confidence = 10.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ground_based_people_detection_min_confidence = -1.75;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("ground_based_people_detection_min_confidence", "double", 0, "Minimum detection confidence (hog+svm)", "", &GroundBasedPeopleDetectorConfig::ground_based_people_detection_min_confidence)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("ground_based_people_detection_min_confidence", "double", 0, "Minimum detection confidence (hog+svm)", "", &GroundBasedPeopleDetectorConfig::ground_based_people_detection_min_confidence)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.minimum_person_height = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.minimum_person_height = 2.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.minimum_person_height = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("minimum_person_height", "double", 0, "Minimum person height", "", &GroundBasedPeopleDetectorConfig::minimum_person_height)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("minimum_person_height", "double", 0, "Minimum person height", "", &GroundBasedPeopleDetectorConfig::minimum_person_height)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.maximum_person_height = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.maximum_person_height = 4.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.maximum_person_height = 2.3;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("maximum_person_height", "double", 0, "Maximum person height", "", &GroundBasedPeopleDetectorConfig::maximum_person_height)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("maximum_person_height", "double", 0, "Maximum person height", "", &GroundBasedPeopleDetectorConfig::maximum_person_height)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_distance = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_distance = 50.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_distance = 50.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("max_distance", "double", 0, "Threshold on distance from the sensor", "", &GroundBasedPeopleDetectorConfig::max_distance)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("max_distance", "double", 0, "Threshold on distance from the sensor", "", &GroundBasedPeopleDetectorConfig::max_distance)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sampling_factor = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sampling_factor = 8;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sampling_factor = 4;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<int>("sampling_factor", "int", 0, "Point cloud downsampling factor", "{'enum_description': 'An enum to set sampling_factor', 'enum': [{'srcline': 25, 'description': '1', 'srcfile': '/home/hri/catkin_ws/src/openptrack/detection/cfg/GroundBasedPeopleDetector.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': '1'}, {'srcline': 26, 'description': '2', 'srcfile': '/home/hri/catkin_ws/src/openptrack/detection/cfg/GroundBasedPeopleDetector.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': '2'}, {'srcline': 27, 'description': '4', 'srcfile': '/home/hri/catkin_ws/src/openptrack/detection/cfg/GroundBasedPeopleDetector.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': '4'}, {'srcline': 28, 'description': '8', 'srcfile': '/home/hri/catkin_ws/src/openptrack/detection/cfg/GroundBasedPeopleDetector.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': '8'}]}", &GroundBasedPeopleDetectorConfig::sampling_factor)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<int>("sampling_factor", "int", 0, "Point cloud downsampling factor", "{'enum_description': 'An enum to set sampling_factor', 'enum': [{'srcline': 25, 'description': '1', 'srcfile': '/home/hri/catkin_ws/src/openptrack/detection/cfg/GroundBasedPeopleDetector.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': '1'}, {'srcline': 26, 'description': '2', 'srcfile': '/home/hri/catkin_ws/src/openptrack/detection/cfg/GroundBasedPeopleDetector.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': '2'}, {'srcline': 27, 'description': '4', 'srcfile': '/home/hri/catkin_ws/src/openptrack/detection/cfg/GroundBasedPeopleDetector.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': '4'}, {'srcline': 28, 'description': '8', 'srcfile': '/home/hri/catkin_ws/src/openptrack/detection/cfg/GroundBasedPeopleDetector.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': '8'}]}", &GroundBasedPeopleDetectorConfig::sampling_factor)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_rgb = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_rgb = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_rgb = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<bool>("use_rgb", "bool", 0, "Flag stating if classifiers based on RGB image should be used or not", "", &GroundBasedPeopleDetectorConfig::use_rgb)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<bool>("use_rgb", "bool", 0, "Flag stating if classifiers based on RGB image should be used or not", "", &GroundBasedPeopleDetectorConfig::use_rgb)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.minimum_luminance = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.minimum_luminance = 255;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.minimum_luminance = 120;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<int>("minimum_luminance", "int", 0, "Threshold on image luminance. If luminance is over this threshold, classifiers on RGB image are also used", "", &GroundBasedPeopleDetectorConfig::minimum_luminance)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<int>("minimum_luminance", "int", 0, "Threshold on image luminance. If luminance is over this threshold, classifiers on RGB image are also used", "", &GroundBasedPeopleDetectorConfig::minimum_luminance)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sensor_tilt_compensation = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sensor_tilt_compensation = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sensor_tilt_compensation = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<bool>("sensor_tilt_compensation", "bool", 0, "If true, sensor tilt angle wrt ground plane is compensated to improve people detection", "", &GroundBasedPeopleDetectorConfig::sensor_tilt_compensation)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<bool>("sensor_tilt_compensation", "bool", 0, "If true, sensor tilt angle wrt ground plane is compensated to improve people detection", "", &GroundBasedPeopleDetectorConfig::sensor_tilt_compensation)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.heads_minimum_distance = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.heads_minimum_distance = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.heads_minimum_distance = 0.3;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("heads_minimum_distance", "double", 0, "Minimum distance between two persons", "", &GroundBasedPeopleDetectorConfig::heads_minimum_distance)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("heads_minimum_distance", "double", 0, "Minimum distance between two persons", "", &GroundBasedPeopleDetectorConfig::heads_minimum_distance)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.voxel_size = 0.01;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.voxel_size = 0.1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.voxel_size = 0.06;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("voxel_size", "double", 0, "Voxel size used to downsample the point cloud", "", &GroundBasedPeopleDetectorConfig::voxel_size)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("voxel_size", "double", 0, "Voxel size used to downsample the point cloud", "", &GroundBasedPeopleDetectorConfig::voxel_size)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.apply_denoising = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.apply_denoising = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.apply_denoising = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<bool>("apply_denoising", "bool", 0, "If true, a statistical filter is applied to the point cloud to remove noise", "", &GroundBasedPeopleDetectorConfig::apply_denoising)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<bool>("apply_denoising", "bool", 0, "If true, a statistical filter is applied to the point cloud to remove noise", "", &GroundBasedPeopleDetectorConfig::apply_denoising)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.mean_k_denoising = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.mean_k_denoising = 100.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.mean_k_denoising = 5.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("mean_k_denoising", "double", 0, "Mean K: number of neighbors to analyze for each point", "", &GroundBasedPeopleDetectorConfig::mean_k_denoising)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("mean_k_denoising", "double", 0, "Mean K: number of neighbors to analyze for each point", "", &GroundBasedPeopleDetectorConfig::mean_k_denoising)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.std_dev_denoising = 0.1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.std_dev_denoising = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.std_dev_denoising = 0.3;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("std_dev_denoising", "double", 0, "Standard deviation for denoising", "", &GroundBasedPeopleDetectorConfig::std_dev_denoising)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("std_dev_denoising", "double", 0, "Standard deviation for denoising", "", &GroundBasedPeopleDetectorConfig::std_dev_denoising)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.background_subtraction = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.background_subtraction = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.background_subtraction = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<bool>("background_subtraction", "bool", 0, "Flag enabling/disabling background subtraction", "", &GroundBasedPeopleDetectorConfig::background_subtraction)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<bool>("background_subtraction", "bool", 0, "Flag enabling/disabling background subtraction", "", &GroundBasedPeopleDetectorConfig::background_subtraction)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.background_resolution = 0.01;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.background_resolution = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.background_resolution = 0.3;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("background_resolution", "double", 0, "Resolution of the octree representing the background", "", &GroundBasedPeopleDetectorConfig::background_resolution)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("background_resolution", "double", 0, "Resolution of the octree representing the background", "", &GroundBasedPeopleDetectorConfig::background_resolution)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.background_seconds = 0.2;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.background_seconds = 10.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.background_seconds = 3.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("background_seconds", "double", 0, "Seconds to use to learn the background", "", &GroundBasedPeopleDetectorConfig::background_seconds)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<double>("background_seconds", "double", 0, "Seconds to use to learn the background", "", &GroundBasedPeopleDetectorConfig::background_seconds)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.lock_ground = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.lock_ground = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.lock_ground = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<bool>("lock_ground", "bool", 0, "# Flag that locks the ground plane update", "", &GroundBasedPeopleDetectorConfig::lock_ground)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<bool>("lock_ground", "bool", 0, "# Flag that locks the ground plane update", "", &GroundBasedPeopleDetectorConfig::lock_ground)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sr_conf_threshold = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sr_conf_threshold = 255;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sr_conf_threshold = 180;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<int>("sr_conf_threshold", "int", 0, "Threshold on SwissRanger depth confidence", "", &GroundBasedPeopleDetectorConfig::sr_conf_threshold)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::ParamDescription<int>("sr_conf_threshold", "int", 0, "Threshold on SwissRanger depth confidence", "", &GroundBasedPeopleDetectorConfig::sr_conf_threshold)));
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(GroundBasedPeopleDetectorConfig::AbstractGroupDescriptionConstPtr(new GroundBasedPeopleDetectorConfig::GroupDescription<GroundBasedPeopleDetectorConfig::DEFAULT, GroundBasedPeopleDetectorConfig>(Default)));
//#line 356 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<GroundBasedPeopleDetectorConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<GroundBasedPeopleDetectorConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    GroundBasedPeopleDetectorConfig __max__;
    GroundBasedPeopleDetectorConfig __min__;
    GroundBasedPeopleDetectorConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const GroundBasedPeopleDetectorConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static GroundBasedPeopleDetectorConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &GroundBasedPeopleDetectorConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const GroundBasedPeopleDetectorConfig &GroundBasedPeopleDetectorConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const GroundBasedPeopleDetectorConfig &GroundBasedPeopleDetectorConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const GroundBasedPeopleDetectorConfig &GroundBasedPeopleDetectorConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<GroundBasedPeopleDetectorConfig::AbstractParamDescriptionConstPtr> &GroundBasedPeopleDetectorConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<GroundBasedPeopleDetectorConfig::AbstractGroupDescriptionConstPtr> &GroundBasedPeopleDetectorConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const GroundBasedPeopleDetectorConfigStatics *GroundBasedPeopleDetectorConfig::__get_statics__()
  {
    const static GroundBasedPeopleDetectorConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = GroundBasedPeopleDetectorConfigStatics::get_instance();
    
    return statics;
  }

//#line 25 "/home/hri/catkin_ws/src/openptrack/detection/cfg/GroundBasedPeopleDetector.cfg"
      const int GroundBasedPeopleDetector_1 = 1;
//#line 26 "/home/hri/catkin_ws/src/openptrack/detection/cfg/GroundBasedPeopleDetector.cfg"
      const int GroundBasedPeopleDetector_2 = 2;
//#line 27 "/home/hri/catkin_ws/src/openptrack/detection/cfg/GroundBasedPeopleDetector.cfg"
      const int GroundBasedPeopleDetector_4 = 4;
//#line 28 "/home/hri/catkin_ws/src/openptrack/detection/cfg/GroundBasedPeopleDetector.cfg"
      const int GroundBasedPeopleDetector_8 = 8;
}

#endif // __GROUNDBASEDPEOPLEDETECTORRECONFIGURATOR_H__
