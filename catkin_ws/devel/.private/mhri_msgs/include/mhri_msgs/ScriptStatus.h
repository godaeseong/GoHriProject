// Generated by gencpp from file mhri_msgs/ScriptStatus.msg
// DO NOT EDIT!


#ifndef MHRI_MSGS_MESSAGE_SCRIPTSTATUS_H
#define MHRI_MSGS_MESSAGE_SCRIPTSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mhri_msgs
{
template <class ContainerAllocator>
struct ScriptStatus_
{
  typedef ScriptStatus_<ContainerAllocator> Type;

  ScriptStatus_()
    : last_match()
    , current_topic()
    , topic_structure()
    , user_vars()  {
    }
  ScriptStatus_(const ContainerAllocator& _alloc)
    : last_match(_alloc)
    , current_topic(_alloc)
    , topic_structure(_alloc)
    , user_vars(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _last_match_type;
  _last_match_type last_match;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _current_topic_type;
  _current_topic_type current_topic;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_structure_type;
  _topic_structure_type topic_structure;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _user_vars_type;
  _user_vars_type user_vars;




  typedef boost::shared_ptr< ::mhri_msgs::ScriptStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mhri_msgs::ScriptStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ScriptStatus_

typedef ::mhri_msgs::ScriptStatus_<std::allocator<void> > ScriptStatus;

typedef boost::shared_ptr< ::mhri_msgs::ScriptStatus > ScriptStatusPtr;
typedef boost::shared_ptr< ::mhri_msgs::ScriptStatus const> ScriptStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mhri_msgs::ScriptStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mhri_msgs::ScriptStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mhri_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'mhri_msgs': ['/home/hri/catkin_ws/src/mhri_workspace/mhri/mhri_msgs/msg', '/home/hri/catkin_ws/devel/.private/mhri_msgs/share/mhri_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mhri_msgs::ScriptStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mhri_msgs::ScriptStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mhri_msgs::ScriptStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mhri_msgs::ScriptStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mhri_msgs::ScriptStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mhri_msgs::ScriptStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mhri_msgs::ScriptStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07603c38a67cb1e997f0292a756e0758";
  }

  static const char* value(const ::mhri_msgs::ScriptStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07603c38a67cb1e9ULL;
  static const uint64_t static_value2 = 0x97f0292a756e0758ULL;
};

template<class ContainerAllocator>
struct DataType< ::mhri_msgs::ScriptStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mhri_msgs/ScriptStatus";
  }

  static const char* value(const ::mhri_msgs::ScriptStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mhri_msgs::ScriptStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string last_match\n\
string current_topic\n\
string topic_structure\n\
string user_vars\n\
";
  }

  static const char* value(const ::mhri_msgs::ScriptStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mhri_msgs::ScriptStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.last_match);
      stream.next(m.current_topic);
      stream.next(m.topic_structure);
      stream.next(m.user_vars);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScriptStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mhri_msgs::ScriptStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mhri_msgs::ScriptStatus_<ContainerAllocator>& v)
  {
    s << indent << "last_match: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.last_match);
    s << indent << "current_topic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.current_topic);
    s << indent << "topic_structure: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topic_structure);
    s << indent << "user_vars: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.user_vars);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MHRI_MSGS_MESSAGE_SCRIPTSTATUS_H
