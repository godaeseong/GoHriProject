// Generated by gencpp from file opt_msgs/Detection.msg
// DO NOT EDIT!


#ifndef OPT_MSGS_MESSAGE_DETECTION_H
#define OPT_MSGS_MESSAGE_DETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <opt_msgs/BoundingBox3D.h>
#include <opt_msgs/BoundingBox2D.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace opt_msgs
{
template <class ContainerAllocator>
struct Detection_
{
  typedef Detection_<ContainerAllocator> Type;

  Detection_()
    : box_3D()
    , box_2D()
    , centroid()
    , bottom()
    , top()
    , height(0.0)
    , confidence(0.0)
    , distance(0.0)
    , occluded(false)  {
    }
  Detection_(const ContainerAllocator& _alloc)
    : box_3D(_alloc)
    , box_2D(_alloc)
    , centroid(_alloc)
    , bottom(_alloc)
    , top(_alloc)
    , height(0.0)
    , confidence(0.0)
    , distance(0.0)
    , occluded(false)  {
  (void)_alloc;
    }



   typedef  ::opt_msgs::BoundingBox3D_<ContainerAllocator>  _box_3D_type;
  _box_3D_type box_3D;

   typedef  ::opt_msgs::BoundingBox2D_<ContainerAllocator>  _box_2D_type;
  _box_2D_type box_2D;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _centroid_type;
  _centroid_type centroid;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _bottom_type;
  _bottom_type bottom;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _top_type;
  _top_type top;

   typedef double _height_type;
  _height_type height;

   typedef double _confidence_type;
  _confidence_type confidence;

   typedef double _distance_type;
  _distance_type distance;

   typedef uint8_t _occluded_type;
  _occluded_type occluded;




  typedef boost::shared_ptr< ::opt_msgs::Detection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opt_msgs::Detection_<ContainerAllocator> const> ConstPtr;

}; // struct Detection_

typedef ::opt_msgs::Detection_<std::allocator<void> > Detection;

typedef boost::shared_ptr< ::opt_msgs::Detection > DetectionPtr;
typedef boost::shared_ptr< ::opt_msgs::Detection const> DetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opt_msgs::Detection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opt_msgs::Detection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace opt_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'opt_msgs': ['/home/hri/catkin_ws/src/openptrack/opt_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::opt_msgs::Detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opt_msgs::Detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opt_msgs::Detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opt_msgs::Detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opt_msgs::Detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opt_msgs::Detection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opt_msgs::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f8c84b166dcde721bb56a043ef007291";
  }

  static const char* value(const ::opt_msgs::Detection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf8c84b166dcde721ULL;
  static const uint64_t static_value2 = 0xbb56a043ef007291ULL;
};

template<class ContainerAllocator>
struct DataType< ::opt_msgs::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opt_msgs/Detection";
  }

  static const char* value(const ::opt_msgs::Detection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opt_msgs::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opt_msgs/BoundingBox3D box_3D\n\
opt_msgs/BoundingBox2D box_2D\n\
\n\
geometry_msgs/Vector3 centroid\n\
geometry_msgs/Vector3 bottom\n\
geometry_msgs/Vector3 top\n\
\n\
float64 height\n\
float64 confidence\n\
float64 distance\n\
bool occluded\n\
\n\
================================================================================\n\
MSG: opt_msgs/BoundingBox3D\n\
geometry_msgs/Vector3 p1\n\
geometry_msgs/Vector3 p2\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: opt_msgs/BoundingBox2D\n\
int32 x\n\
int32 y\n\
int32 width\n\
int32 height\n\
";
  }

  static const char* value(const ::opt_msgs::Detection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opt_msgs::Detection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.box_3D);
      stream.next(m.box_2D);
      stream.next(m.centroid);
      stream.next(m.bottom);
      stream.next(m.top);
      stream.next(m.height);
      stream.next(m.confidence);
      stream.next(m.distance);
      stream.next(m.occluded);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Detection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opt_msgs::Detection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opt_msgs::Detection_<ContainerAllocator>& v)
  {
    s << indent << "box_3D: ";
    s << std::endl;
    Printer< ::opt_msgs::BoundingBox3D_<ContainerAllocator> >::stream(s, indent + "  ", v.box_3D);
    s << indent << "box_2D: ";
    s << std::endl;
    Printer< ::opt_msgs::BoundingBox2D_<ContainerAllocator> >::stream(s, indent + "  ", v.box_2D);
    s << indent << "centroid: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.centroid);
    s << indent << "bottom: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.bottom);
    s << indent << "top: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.top);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "occluded: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.occluded);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPT_MSGS_MESSAGE_DETECTION_H
