// Generated by gencpp from file opt_msgs/OPTSensorRequest.msg
// DO NOT EDIT!


#ifndef OPT_MSGS_MESSAGE_OPTSENSORREQUEST_H
#define OPT_MSGS_MESSAGE_OPTSENSORREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace opt_msgs
{
template <class ContainerAllocator>
struct OPTSensorRequest_
{
  typedef OPTSensorRequest_<ContainerAllocator> Type;

  OPTSensorRequest_()
    : session_id(0)
    , id()
    , type(0)
    , serial()
    , ip()
    , serial_left()
    , serial_right()  {
    }
  OPTSensorRequest_(const ContainerAllocator& _alloc)
    : session_id(0)
    , id(_alloc)
    , type(0)
    , serial(_alloc)
    , ip(_alloc)
    , serial_left(_alloc)
    , serial_right(_alloc)  {
  (void)_alloc;
    }



   typedef uint64_t _session_id_type;
  _session_id_type session_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef uint8_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _serial_type;
  _serial_type serial;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ip_type;
  _ip_type ip;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _serial_left_type;
  _serial_left_type serial_left;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _serial_right_type;
  _serial_right_type serial_right;


    enum { TYPE_NOT_SET = 0u };
     enum { TYPE_KINECT1 = 1u };
     enum { TYPE_SR4500 = 2u };
     enum { TYPE_STEREO_PG = 3u };
     enum { TYPE_KINECT2 = 4u };
 

  typedef boost::shared_ptr< ::opt_msgs::OPTSensorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opt_msgs::OPTSensorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct OPTSensorRequest_

typedef ::opt_msgs::OPTSensorRequest_<std::allocator<void> > OPTSensorRequest;

typedef boost::shared_ptr< ::opt_msgs::OPTSensorRequest > OPTSensorRequestPtr;
typedef boost::shared_ptr< ::opt_msgs::OPTSensorRequest const> OPTSensorRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opt_msgs::OPTSensorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opt_msgs::OPTSensorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace opt_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'opt_msgs': ['/home/hri/catkin_ws/src/openptrack/opt_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::opt_msgs::OPTSensorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opt_msgs::OPTSensorRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opt_msgs::OPTSensorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opt_msgs::OPTSensorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opt_msgs::OPTSensorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opt_msgs::OPTSensorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opt_msgs::OPTSensorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd8a9a1b311356c9fc25f0d9bb085f73";
  }

  static const char* value(const ::opt_msgs::OPTSensorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd8a9a1b311356c9ULL;
  static const uint64_t static_value2 = 0xfc25f0d9bb085f73ULL;
};

template<class ContainerAllocator>
struct DataType< ::opt_msgs::OPTSensorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opt_msgs/OPTSensorRequest";
  }

  static const char* value(const ::opt_msgs::OPTSensorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opt_msgs::OPTSensorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 TYPE_NOT_SET=0\n\
uint8 TYPE_KINECT1=1\n\
uint8 TYPE_SR4500=2\n\
uint8 TYPE_STEREO_PG=3\n\
uint8 TYPE_KINECT2=4\n\
\n\
uint64 session_id\n\
\n\
string id\n\
uint8  type\n\
\n\
\n\
string serial\n\
\n\
\n\
string ip\n\
\n\
\n\
string serial_left\n\
string serial_right\n\
\n\
";
  }

  static const char* value(const ::opt_msgs::OPTSensorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opt_msgs::OPTSensorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.session_id);
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.serial);
      stream.next(m.ip);
      stream.next(m.serial_left);
      stream.next(m.serial_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OPTSensorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opt_msgs::OPTSensorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opt_msgs::OPTSensorRequest_<ContainerAllocator>& v)
  {
    s << indent << "session_id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.session_id);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "serial: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.serial);
    s << indent << "ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ip);
    s << indent << "serial_left: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.serial_left);
    s << indent << "serial_right: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.serial_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPT_MSGS_MESSAGE_OPTSENSORREQUEST_H
