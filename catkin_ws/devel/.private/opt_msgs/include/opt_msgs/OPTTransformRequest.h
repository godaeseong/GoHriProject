// Generated by gencpp from file opt_msgs/OPTTransformRequest.msg
// DO NOT EDIT!


#ifndef OPT_MSGS_MESSAGE_OPTTRANSFORMREQUEST_H
#define OPT_MSGS_MESSAGE_OPTTRANSFORMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>

namespace opt_msgs
{
template <class ContainerAllocator>
struct OPTTransformRequest_
{
  typedef OPTTransformRequest_<ContainerAllocator> Type;

  OPTTransformRequest_()
    : calibration_id(0)
    , parent_id()
    , child_id()
    , transform()  {
    }
  OPTTransformRequest_(const ContainerAllocator& _alloc)
    : calibration_id(0)
    , parent_id(_alloc)
    , child_id(_alloc)
    , transform(_alloc)  {
  (void)_alloc;
    }



   typedef uint64_t _calibration_id_type;
  _calibration_id_type calibration_id;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _parent_id_type;
  _parent_id_type parent_id;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _child_id_type;
  _child_id_type child_id;

   typedef std::vector< ::geometry_msgs::Transform_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Transform_<ContainerAllocator> >::other >  _transform_type;
  _transform_type transform;




  typedef boost::shared_ptr< ::opt_msgs::OPTTransformRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opt_msgs::OPTTransformRequest_<ContainerAllocator> const> ConstPtr;

}; // struct OPTTransformRequest_

typedef ::opt_msgs::OPTTransformRequest_<std::allocator<void> > OPTTransformRequest;

typedef boost::shared_ptr< ::opt_msgs::OPTTransformRequest > OPTTransformRequestPtr;
typedef boost::shared_ptr< ::opt_msgs::OPTTransformRequest const> OPTTransformRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opt_msgs::OPTTransformRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opt_msgs::OPTTransformRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace opt_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'opt_msgs': ['/home/hri/catkin_ws/src/openptrack/opt_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::opt_msgs::OPTTransformRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opt_msgs::OPTTransformRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opt_msgs::OPTTransformRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opt_msgs::OPTTransformRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opt_msgs::OPTTransformRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opt_msgs::OPTTransformRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opt_msgs::OPTTransformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "990fb5ab10a931419769120db48c5131";
  }

  static const char* value(const ::opt_msgs::OPTTransformRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x990fb5ab10a93141ULL;
  static const uint64_t static_value2 = 0x9769120db48c5131ULL;
};

template<class ContainerAllocator>
struct DataType< ::opt_msgs::OPTTransformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opt_msgs/OPTTransformRequest";
  }

  static const char* value(const ::opt_msgs::OPTTransformRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opt_msgs::OPTTransformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 calibration_id\n\
\n\
string[]                  parent_id\n\
string[]                  child_id\n\
geometry_msgs/Transform[] transform\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::opt_msgs::OPTTransformRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opt_msgs::OPTTransformRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.calibration_id);
      stream.next(m.parent_id);
      stream.next(m.child_id);
      stream.next(m.transform);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OPTTransformRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opt_msgs::OPTTransformRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opt_msgs::OPTTransformRequest_<ContainerAllocator>& v)
  {
    s << indent << "calibration_id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.calibration_id);
    s << indent << "parent_id[]" << std::endl;
    for (size_t i = 0; i < v.parent_id.size(); ++i)
    {
      s << indent << "  parent_id[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parent_id[i]);
    }
    s << indent << "child_id[]" << std::endl;
    for (size_t i = 0; i < v.child_id.size(); ++i)
    {
      s << indent << "  child_id[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.child_id[i]);
    }
    s << indent << "transform[]" << std::endl;
    for (size_t i = 0; i < v.transform.size(); ++i)
    {
      s << indent << "  transform[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "    ", v.transform[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPT_MSGS_MESSAGE_OPTTRANSFORMREQUEST_H
