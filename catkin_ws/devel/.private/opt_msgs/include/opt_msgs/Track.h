// Generated by gencpp from file opt_msgs/Track.msg
// DO NOT EDIT!


#ifndef OPT_MSGS_MESSAGE_TRACK_H
#define OPT_MSGS_MESSAGE_TRACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <opt_msgs/BoundingBox2D.h>

namespace opt_msgs
{
template <class ContainerAllocator>
struct Track_
{
  typedef Track_<ContainerAllocator> Type;

  Track_()
    : id(0)
    , x(0.0)
    , y(0.0)
    , height(0.0)
    , distance(0.0)
    , age(0.0)
    , confidence(0.0)
    , visibility(0)
    , box_2D()  {
    }
  Track_(const ContainerAllocator& _alloc)
    : id(0)
    , x(0.0)
    , y(0.0)
    , height(0.0)
    , distance(0.0)
    , age(0.0)
    , confidence(0.0)
    , visibility(0)
    , box_2D(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _height_type;
  _height_type height;

   typedef double _distance_type;
  _distance_type distance;

   typedef double _age_type;
  _age_type age;

   typedef double _confidence_type;
  _confidence_type confidence;

   typedef uint8_t _visibility_type;
  _visibility_type visibility;

   typedef  ::opt_msgs::BoundingBox2D_<ContainerAllocator>  _box_2D_type;
  _box_2D_type box_2D;


    enum { VISIBLE = 0u };
     enum { OCCLUDED = 1u };
     enum { NOT_VISIBLE = 2u };
 

  typedef boost::shared_ptr< ::opt_msgs::Track_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opt_msgs::Track_<ContainerAllocator> const> ConstPtr;

}; // struct Track_

typedef ::opt_msgs::Track_<std::allocator<void> > Track;

typedef boost::shared_ptr< ::opt_msgs::Track > TrackPtr;
typedef boost::shared_ptr< ::opt_msgs::Track const> TrackConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opt_msgs::Track_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opt_msgs::Track_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace opt_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'opt_msgs': ['/home/hri/catkin_ws/src/openptrack/opt_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::opt_msgs::Track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opt_msgs::Track_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opt_msgs::Track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opt_msgs::Track_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opt_msgs::Track_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opt_msgs::Track_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opt_msgs::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "991302462c0fa1f63ca966483e3f3c8c";
  }

  static const char* value(const ::opt_msgs::Track_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x991302462c0fa1f6ULL;
  static const uint64_t static_value2 = 0x3ca966483e3f3c8cULL;
};

template<class ContainerAllocator>
struct DataType< ::opt_msgs::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opt_msgs/Track";
  }

  static const char* value(const ::opt_msgs::Track_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opt_msgs::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 VISIBLE = 0\n\
uint8 OCCLUDED = 1\n\
uint8 NOT_VISIBLE = 2\n\
\n\
int32 id\n\
\n\
float64 x\n\
float64 y\n\
float64 height\n\
float64 distance\n\
float64 age\n\
float64 confidence\n\
\n\
uint8 visibility\n\
\n\
opt_msgs/BoundingBox2D box_2D\n\
\n\
\n\
================================================================================\n\
MSG: opt_msgs/BoundingBox2D\n\
int32 x\n\
int32 y\n\
int32 width\n\
int32 height\n\
";
  }

  static const char* value(const ::opt_msgs::Track_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opt_msgs::Track_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.height);
      stream.next(m.distance);
      stream.next(m.age);
      stream.next(m.confidence);
      stream.next(m.visibility);
      stream.next(m.box_2D);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Track_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opt_msgs::Track_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opt_msgs::Track_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "age: ";
    Printer<double>::stream(s, indent + "  ", v.age);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
    s << indent << "visibility: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.visibility);
    s << indent << "box_2D: ";
    s << std::endl;
    Printer< ::opt_msgs::BoundingBox2D_<ContainerAllocator> >::stream(s, indent + "  ", v.box_2D);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPT_MSGS_MESSAGE_TRACK_H
