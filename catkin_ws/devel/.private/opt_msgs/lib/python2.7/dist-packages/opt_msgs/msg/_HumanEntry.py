# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from opt_msgs/HumanEntry.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class HumanEntry(genpy.Message):
  _md5sum = "62ab54a7d1e278036ce98ff633f1bef9"
  _type = "opt_msgs/HumanEntry"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time stamp
uint64 personID
float64 personCentroidX
float64 personCentroidY
float64 personCentroidZ
float64 personBoundingBoxTopCenterX
float64 personBoundingBoxTopCenterY
float64 personBoundingBoxTopCenterZ
float64 Xvelocity
float64 Yvelocity
float64 Zvelocity
float64 ROIwidth
float64 ROIheight
float64 Xsigma
float64 Ysigma
float64 Zsigma
"""
  __slots__ = ['stamp','personID','personCentroidX','personCentroidY','personCentroidZ','personBoundingBoxTopCenterX','personBoundingBoxTopCenterY','personBoundingBoxTopCenterZ','Xvelocity','Yvelocity','Zvelocity','ROIwidth','ROIheight','Xsigma','Ysigma','Zsigma']
  _slot_types = ['time','uint64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,personID,personCentroidX,personCentroidY,personCentroidZ,personBoundingBoxTopCenterX,personBoundingBoxTopCenterY,personBoundingBoxTopCenterZ,Xvelocity,Yvelocity,Zvelocity,ROIwidth,ROIheight,Xsigma,Ysigma,Zsigma

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HumanEntry, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.personID is None:
        self.personID = 0
      if self.personCentroidX is None:
        self.personCentroidX = 0.
      if self.personCentroidY is None:
        self.personCentroidY = 0.
      if self.personCentroidZ is None:
        self.personCentroidZ = 0.
      if self.personBoundingBoxTopCenterX is None:
        self.personBoundingBoxTopCenterX = 0.
      if self.personBoundingBoxTopCenterY is None:
        self.personBoundingBoxTopCenterY = 0.
      if self.personBoundingBoxTopCenterZ is None:
        self.personBoundingBoxTopCenterZ = 0.
      if self.Xvelocity is None:
        self.Xvelocity = 0.
      if self.Yvelocity is None:
        self.Yvelocity = 0.
      if self.Zvelocity is None:
        self.Zvelocity = 0.
      if self.ROIwidth is None:
        self.ROIwidth = 0.
      if self.ROIheight is None:
        self.ROIheight = 0.
      if self.Xsigma is None:
        self.Xsigma = 0.
      if self.Ysigma is None:
        self.Ysigma = 0.
      if self.Zsigma is None:
        self.Zsigma = 0.
    else:
      self.stamp = genpy.Time()
      self.personID = 0
      self.personCentroidX = 0.
      self.personCentroidY = 0.
      self.personCentroidZ = 0.
      self.personBoundingBoxTopCenterX = 0.
      self.personBoundingBoxTopCenterY = 0.
      self.personBoundingBoxTopCenterZ = 0.
      self.Xvelocity = 0.
      self.Yvelocity = 0.
      self.Zvelocity = 0.
      self.ROIwidth = 0.
      self.ROIheight = 0.
      self.Xsigma = 0.
      self.Ysigma = 0.
      self.Zsigma = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2IQ14d().pack(_x.stamp.secs, _x.stamp.nsecs, _x.personID, _x.personCentroidX, _x.personCentroidY, _x.personCentroidZ, _x.personBoundingBoxTopCenterX, _x.personBoundingBoxTopCenterY, _x.personBoundingBoxTopCenterZ, _x.Xvelocity, _x.Yvelocity, _x.Zvelocity, _x.ROIwidth, _x.ROIheight, _x.Xsigma, _x.Ysigma, _x.Zsigma))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 128
      (_x.stamp.secs, _x.stamp.nsecs, _x.personID, _x.personCentroidX, _x.personCentroidY, _x.personCentroidZ, _x.personBoundingBoxTopCenterX, _x.personBoundingBoxTopCenterY, _x.personBoundingBoxTopCenterZ, _x.Xvelocity, _x.Yvelocity, _x.Zvelocity, _x.ROIwidth, _x.ROIheight, _x.Xsigma, _x.Ysigma, _x.Zsigma,) = _get_struct_2IQ14d().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2IQ14d().pack(_x.stamp.secs, _x.stamp.nsecs, _x.personID, _x.personCentroidX, _x.personCentroidY, _x.personCentroidZ, _x.personBoundingBoxTopCenterX, _x.personBoundingBoxTopCenterY, _x.personBoundingBoxTopCenterZ, _x.Xvelocity, _x.Yvelocity, _x.Zvelocity, _x.ROIwidth, _x.ROIheight, _x.Xsigma, _x.Ysigma, _x.Zsigma))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 128
      (_x.stamp.secs, _x.stamp.nsecs, _x.personID, _x.personCentroidX, _x.personCentroidY, _x.personCentroidZ, _x.personBoundingBoxTopCenterX, _x.personBoundingBoxTopCenterY, _x.personBoundingBoxTopCenterZ, _x.Xvelocity, _x.Yvelocity, _x.Zvelocity, _x.ROIwidth, _x.ROIheight, _x.Xsigma, _x.Ysigma, _x.Zsigma,) = _get_struct_2IQ14d().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IQ14d = None
def _get_struct_2IQ14d():
    global _struct_2IQ14d
    if _struct_2IQ14d is None:
        _struct_2IQ14d = struct.Struct("<2IQ14d")
    return _struct_2IQ14d
