# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from opt_msgs/Track.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import opt_msgs.msg

class Track(genpy.Message):
  _md5sum = "991302462c0fa1f63ca966483e3f3c8c"
  _type = "opt_msgs/Track"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 VISIBLE = 0
uint8 OCCLUDED = 1
uint8 NOT_VISIBLE = 2

int32 id

float64 x
float64 y
float64 height
float64 distance
float64 age
float64 confidence

uint8 visibility

opt_msgs/BoundingBox2D box_2D


================================================================================
MSG: opt_msgs/BoundingBox2D
int32 x
int32 y
int32 width
int32 height"""
  # Pseudo-constants
  VISIBLE = 0
  OCCLUDED = 1
  NOT_VISIBLE = 2

  __slots__ = ['id','x','y','height','distance','age','confidence','visibility','box_2D']
  _slot_types = ['int32','float64','float64','float64','float64','float64','float64','uint8','opt_msgs/BoundingBox2D']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,x,y,height,distance,age,confidence,visibility,box_2D

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Track, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.height is None:
        self.height = 0.
      if self.distance is None:
        self.distance = 0.
      if self.age is None:
        self.age = 0.
      if self.confidence is None:
        self.confidence = 0.
      if self.visibility is None:
        self.visibility = 0
      if self.box_2D is None:
        self.box_2D = opt_msgs.msg.BoundingBox2D()
    else:
      self.id = 0
      self.x = 0.
      self.y = 0.
      self.height = 0.
      self.distance = 0.
      self.age = 0.
      self.confidence = 0.
      self.visibility = 0
      self.box_2D = opt_msgs.msg.BoundingBox2D()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i6dB4i().pack(_x.id, _x.x, _x.y, _x.height, _x.distance, _x.age, _x.confidence, _x.visibility, _x.box_2D.x, _x.box_2D.y, _x.box_2D.width, _x.box_2D.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.box_2D is None:
        self.box_2D = opt_msgs.msg.BoundingBox2D()
      end = 0
      _x = self
      start = end
      end += 69
      (_x.id, _x.x, _x.y, _x.height, _x.distance, _x.age, _x.confidence, _x.visibility, _x.box_2D.x, _x.box_2D.y, _x.box_2D.width, _x.box_2D.height,) = _get_struct_i6dB4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i6dB4i().pack(_x.id, _x.x, _x.y, _x.height, _x.distance, _x.age, _x.confidence, _x.visibility, _x.box_2D.x, _x.box_2D.y, _x.box_2D.width, _x.box_2D.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.box_2D is None:
        self.box_2D = opt_msgs.msg.BoundingBox2D()
      end = 0
      _x = self
      start = end
      end += 69
      (_x.id, _x.x, _x.y, _x.height, _x.distance, _x.age, _x.confidence, _x.visibility, _x.box_2D.x, _x.box_2D.y, _x.box_2D.width, _x.box_2D.height,) = _get_struct_i6dB4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i6dB4i = None
def _get_struct_i6dB4i():
    global _struct_i6dB4i
    if _struct_i6dB4i is None:
        _struct_i6dB4i = struct.Struct("<i6dB4i")
    return _struct_i6dB4i
