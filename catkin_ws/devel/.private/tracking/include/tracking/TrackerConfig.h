//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the tracking package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

#ifndef __tracking__TRACKERCONFIG_H__
#define __tracking__TRACKERCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace tracking
{
  class TrackerConfigStatics;
  
  class TrackerConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(TrackerConfig &config, const TrackerConfig &max, const TrackerConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const TrackerConfig &config1, const TrackerConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, TrackerConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const TrackerConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, TrackerConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const TrackerConfig &config) const = 0;
      virtual void getValue(const TrackerConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level, 
          std::string a_description, std::string a_edit_method, T TrackerConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (TrackerConfig::* field);

      virtual void clamp(TrackerConfig &config, const TrackerConfig &max, const TrackerConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const TrackerConfig &config1, const TrackerConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, TrackerConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const TrackerConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, TrackerConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const TrackerConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const TrackerConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, TrackerConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, TrackerConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<TrackerConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(TrackerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("min_confidence_initialization"==(*_i)->name){min_confidence_initialization = boost::any_cast<double>(val);}
        if("max_detection_delay"==(*_i)->name){max_detection_delay = boost::any_cast<double>(val);}
        if("calibration_refinement"==(*_i)->name){calibration_refinement = boost::any_cast<bool>(val);}
        if("gate_distance_probability"==(*_i)->name){gate_distance_probability = boost::any_cast<double>(val);}
        if("acceleration_variance"==(*_i)->name){acceleration_variance = boost::any_cast<double>(val);}
        if("position_variance_weight"==(*_i)->name){position_variance_weight = boost::any_cast<double>(val);}
        if("detector_likelihood"==(*_i)->name){detector_likelihood = boost::any_cast<bool>(val);}
        if("detector_weight"==(*_i)->name){detector_weight = boost::any_cast<double>(val);}
        if("motion_weight"==(*_i)->name){motion_weight = boost::any_cast<double>(val);}
        if("sec_before_old"==(*_i)->name){sec_before_old = boost::any_cast<double>(val);}
        if("sec_before_fake"==(*_i)->name){sec_before_fake = boost::any_cast<double>(val);}
        if("sec_remain_new"==(*_i)->name){sec_remain_new = boost::any_cast<double>(val);}
        if("detections_to_validate"==(*_i)->name){detections_to_validate = boost::any_cast<int>(val);}
      }
    }

    double min_confidence_initialization;
double max_detection_delay;
bool calibration_refinement;
double gate_distance_probability;
double acceleration_variance;
double position_variance_weight;
bool detector_likelihood;
double detector_weight;
double motion_weight;
double sec_before_old;
double sec_before_fake;
double sec_remain_new;
int detections_to_validate;

    bool state;
    std::string name;

    
}groups;



//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double min_confidence_initialization;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_detection_delay;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool calibration_refinement;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double gate_distance_probability;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double acceleration_variance;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double position_variance_weight;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool detector_likelihood;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double detector_weight;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double motion_weight;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double sec_before_old;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double sec_before_fake;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double sec_remain_new;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int detections_to_validate;
//#line 218 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("TrackerConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const TrackerConfig &__max__ = __getMax__();
      const TrackerConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const TrackerConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const TrackerConfig &__getDefault__();
    static const TrackerConfig &__getMax__();
    static const TrackerConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const TrackerConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void TrackerConfig::ParamDescription<std::string>::clamp(TrackerConfig &config, const TrackerConfig &max, const TrackerConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class TrackerConfigStatics
  {
    friend class TrackerConfig;
    
    TrackerConfigStatics()
    {
TrackerConfig::GroupDescription<TrackerConfig::DEFAULT, TrackerConfig> Default("Default", "", 0, 0, true, &TrackerConfig::groups);
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_confidence_initialization = -10.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_confidence_initialization = 10.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_confidence_initialization = 4.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("min_confidence_initialization", "double", 0, "Mininum confidence for track initialization", "", &TrackerConfig::min_confidence_initialization)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("min_confidence_initialization", "double", 0, "Mininum confidence for track initialization", "", &TrackerConfig::min_confidence_initialization)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_detection_delay = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_detection_delay = 3.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_detection_delay = 2.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("max_detection_delay", "double", 0, "Maximum delay that a detection message can have in order to be considered for tracking", "", &TrackerConfig::max_detection_delay)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("max_detection_delay", "double", 0, "Maximum delay that a detection message can have in order to be considered for tracking", "", &TrackerConfig::max_detection_delay)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.calibration_refinement = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.calibration_refinement = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.calibration_refinement = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<bool>("calibration_refinement", "bool", 0, "Flag stating if the results of a calibration refinement procedure should be used to correct detection positions", "", &TrackerConfig::calibration_refinement)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<bool>("calibration_refinement", "bool", 0, "Flag stating if the results of a calibration refinement procedure should be used to correct detection positions", "", &TrackerConfig::calibration_refinement)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gate_distance_probability = 0.5;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gate_distance_probability = 0.999;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gate_distance_probability = 0.99;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("gate_distance_probability", "double", 0, "The higher is this, the higher motion variance is allowed", "{'enum_description': 'An enum to set gate_distance_probability', 'enum': [{'srcline': 26, 'description': '0.5', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.5, 'ctype': 'double', 'type': 'double', 'name': '0'}, {'srcline': 27, 'description': '0.75', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.75, 'ctype': 'double', 'type': 'double', 'name': '1'}, {'srcline': 28, 'description': '0.8', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.8, 'ctype': 'double', 'type': 'double', 'name': '2'}, {'srcline': 29, 'description': '0.9', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.9, 'ctype': 'double', 'type': 'double', 'name': '3'}, {'srcline': 30, 'description': '0.95', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.95, 'ctype': 'double', 'type': 'double', 'name': '4'}, {'srcline': 31, 'description': '0.98', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.98, 'ctype': 'double', 'type': 'double', 'name': '5'}, {'srcline': 32, 'description': '0.99', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.99, 'ctype': 'double', 'type': 'double', 'name': '6'}, {'srcline': 33, 'description': '0.995', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.995, 'ctype': 'double', 'type': 'double', 'name': '7'}, {'srcline': 34, 'description': '0.998', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.998, 'ctype': 'double', 'type': 'double', 'name': '8'}, {'srcline': 35, 'description': '0.999', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.999, 'ctype': 'double', 'type': 'double', 'name': '9'}]}", &TrackerConfig::gate_distance_probability)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("gate_distance_probability", "double", 0, "The higher is this, the higher motion variance is allowed", "{'enum_description': 'An enum to set gate_distance_probability', 'enum': [{'srcline': 26, 'description': '0.5', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.5, 'ctype': 'double', 'type': 'double', 'name': '0'}, {'srcline': 27, 'description': '0.75', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.75, 'ctype': 'double', 'type': 'double', 'name': '1'}, {'srcline': 28, 'description': '0.8', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.8, 'ctype': 'double', 'type': 'double', 'name': '2'}, {'srcline': 29, 'description': '0.9', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.9, 'ctype': 'double', 'type': 'double', 'name': '3'}, {'srcline': 30, 'description': '0.95', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.95, 'ctype': 'double', 'type': 'double', 'name': '4'}, {'srcline': 31, 'description': '0.98', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.98, 'ctype': 'double', 'type': 'double', 'name': '5'}, {'srcline': 32, 'description': '0.99', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.99, 'ctype': 'double', 'type': 'double', 'name': '6'}, {'srcline': 33, 'description': '0.995', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.995, 'ctype': 'double', 'type': 'double', 'name': '7'}, {'srcline': 34, 'description': '0.998', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.998, 'ctype': 'double', 'type': 'double', 'name': '8'}, {'srcline': 35, 'description': '0.999', 'srcfile': '/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg', 'cconsttype': 'const double', 'value': 0.999, 'ctype': 'double', 'type': 'double', 'name': '9'}]}", &TrackerConfig::gate_distance_probability)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.acceleration_variance = 0.1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.acceleration_variance = 1000.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.acceleration_variance = 100.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("acceleration_variance", "double", 0, "Acceleration variance in people motion model", "", &TrackerConfig::acceleration_variance)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("acceleration_variance", "double", 0, "Acceleration variance in people motion model", "", &TrackerConfig::acceleration_variance)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.position_variance_weight = 1.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.position_variance_weight = 100.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.position_variance_weight = 30.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("position_variance_weight", "double", 0, "Additional weight for position variance in people motion model", "", &TrackerConfig::position_variance_weight)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("position_variance_weight", "double", 0, "Additional weight for position variance in people motion model", "", &TrackerConfig::position_variance_weight)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.detector_likelihood = 0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.detector_likelihood = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.detector_likelihood = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<bool>("detector_likelihood", "bool", 0, "Flag stating if detection likelihood should be used in data association", "", &TrackerConfig::detector_likelihood)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<bool>("detector_likelihood", "bool", 0, "Flag stating if detection likelihood should be used in data association", "", &TrackerConfig::detector_likelihood)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.detector_weight = -10.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.detector_weight = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.detector_weight = -0.25;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("detector_weight", "double", 0, "Weight of detection likelihood in data association", "", &TrackerConfig::detector_weight)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("detector_weight", "double", 0, "Weight of detection likelihood in data association", "", &TrackerConfig::detector_weight)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.motion_weight = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.motion_weight = 10.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.motion_weight = 0.25;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("motion_weight", "double", 0, "Weight of motion likelihood in data association", "", &TrackerConfig::motion_weight)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("motion_weight", "double", 0, "Weight of motion likelihood in data association", "", &TrackerConfig::motion_weight)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sec_before_old = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sec_before_old = 100.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sec_before_old = 8.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("sec_before_old", "double", 0, "Track duration (seconds) after last valid detection", "", &TrackerConfig::sec_before_old)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("sec_before_old", "double", 0, "Track duration (seconds) after last valid detection", "", &TrackerConfig::sec_before_old)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sec_before_fake = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sec_before_fake = 10.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sec_before_fake = 2.4;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("sec_before_fake", "double", 0, "Seconds within which a track should be validated (otherwise it is discarded)", "", &TrackerConfig::sec_before_fake)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("sec_before_fake", "double", 0, "Seconds within which a track should be validated (otherwise it is discarded)", "", &TrackerConfig::sec_before_fake)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sec_remain_new = 0.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sec_remain_new = 10.0;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sec_remain_new = 1.2;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("sec_remain_new", "double", 0, "Seconds after which a visible track obtain NORMAL status", "", &TrackerConfig::sec_remain_new)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<double>("sec_remain_new", "double", 0, "Seconds after which a visible track obtain NORMAL status", "", &TrackerConfig::sec_remain_new)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.detections_to_validate = 1;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.detections_to_validate = 20;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.detections_to_validate = 3;
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<int>("detections_to_validate", "int", 0, "Minimum number of detection<->track associations needed for validating a track", "", &TrackerConfig::detections_to_validate)));
//#line 293 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(TrackerConfig::AbstractParamDescriptionConstPtr(new TrackerConfig::ParamDescription<int>("detections_to_validate", "int", 0, "Minimum number of detection<->track associations needed for validating a track", "", &TrackerConfig::detections_to_validate)));
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(TrackerConfig::AbstractGroupDescriptionConstPtr(new TrackerConfig::GroupDescription<TrackerConfig::DEFAULT, TrackerConfig>(Default)));
//#line 356 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<TrackerConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<TrackerConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<TrackerConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    TrackerConfig __max__;
    TrackerConfig __min__;
    TrackerConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const TrackerConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static TrackerConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &TrackerConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const TrackerConfig &TrackerConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const TrackerConfig &TrackerConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const TrackerConfig &TrackerConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<TrackerConfig::AbstractParamDescriptionConstPtr> &TrackerConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<TrackerConfig::AbstractGroupDescriptionConstPtr> &TrackerConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const TrackerConfigStatics *TrackerConfig::__get_statics__()
  {
    const static TrackerConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = TrackerConfigStatics::get_instance();
    
    return statics;
  }

//#line 26 "/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg"
      const double Tracker_0 = 0.5;
//#line 27 "/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg"
      const double Tracker_1 = 0.75;
//#line 28 "/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg"
      const double Tracker_2 = 0.8;
//#line 29 "/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg"
      const double Tracker_3 = 0.9;
//#line 30 "/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg"
      const double Tracker_4 = 0.95;
//#line 31 "/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg"
      const double Tracker_5 = 0.98;
//#line 32 "/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg"
      const double Tracker_6 = 0.99;
//#line 33 "/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg"
      const double Tracker_7 = 0.995;
//#line 34 "/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg"
      const double Tracker_8 = 0.998;
//#line 35 "/home/hri/catkin_ws/src/openptrack/tracking/cfg/Tracker.cfg"
      const double Tracker_9 = 0.999;
}

#endif // __TRACKERRECONFIGURATOR_H__
